generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Pizza {
  id          String       @id @default(cuid())
  name        String
  description String
  imageUrl    String
  sizes       PizzaSize[]
  ingredients Ingredient[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  categories  Category[]
  cartItem    CartItem[]
}

model PizzaSize {
  id        String   @id @default(cuid())
  size      Size
  price     Int
  pizza     Pizza    @relation(fields: [pizzaId], references: [id])
  pizzaId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cartItem CartItem[]
}

model Ingredient {
  id         String   @id @default(cuid())
  name       String
  imageUrl   String
  price      Int
  pizzas     Pizza[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  cartItem   CartItem[]
}

enum Size {
  SMALL
  MEDIUM
  LARGE
}

enum Category {
  MEAT
  SPICY
  SWEET
  VEGAN
  CHICKEN
}

model Cart {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  cartItems CartItem[]
}

model CartItem {
  id        String       @id @default(cuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  cart      Cart         @relation(fields: [cartId], references: [id])
  cartId    String
  pizza     Pizza        @relation(fields: [pizzaId], references: [id])
  pizzaId   String
  pizzaSize PizzaSize @relation(fields: [pizzaSizeId], references: [id])
  pizzaSizeId String
  toppings  Ingredient[]
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  cart          Cart?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @map("refreshToken")
  access_token      String? @map("accessToken")
  expires_at        Int?    @map("expiresAt")
  token_type        String? @map("tokenType")
  scope             String?
  id_token          String? @map("idToken")
  session_state     String? @map("sessionState")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
